Hello World!
	-> After a year at Novamens, I moved to Inaka where I work since almost 2 years ago
Inaka
	-> So, let's move on to today's talk
Introduction
	- It's a design pattern we keep seeing everywhere
	- API is good for integration, Sockets are good for real-time
	- Use proper names
	-> And what are we going to do with a sysem like that?
Scope
	-> To show you all this process, I created a sample project
		very very similar to the ones we develop @ Inaka all the time
MS: General Idea
	-> So, what are the requirements of a system like this one?
MS: Reqs
	- Erlang seems to be the best language to develop this system with
	-> Well, let's start by designing it
MS: Design
	[ Show each element ]
	- REMEMBER: This is BASED on real-life systems
	-> Let's see how it looks like when it's running
MS: Sample
	-> Let's see how it looks in terms of Erlang processes
MS: Architecture
	- This is a general view
	- A regular Erlang application
	-> Let's see each component in deeper detail
MS: Components
	-> Great! A good design, we used Erlang, we used OTP… what can possibly go wrong, right?
Lesson
	- Turns out that…
	-> So, let's see how much can our system scale, right?
Measures
	- We needed to do a little trick with ART. Since the only full roundtrip from to client to the server and then to the client again is the first event (the one that tells the client the current match status) we decided to measure that one. And you may notice that one is not a regular event since it's just for one particular client. That means it doesn't need to do ALL the roundtrip (i.e. it doesn't need to go through the match event dispatcher, the user process, etc.). For our measure to be more meaningful, we decided to send that event through the match channels (for every other client, it gets filtered at gen_event level), but for that particular client it is sent to the user process and then to the client. So, it's not exactly ART, but is an accurate measure of the same thing in the sense that if gives us high values, we know that something is not quite right, but most importantly, if it gives us low values, we know for sure that our system has low ART.
	-> To get those measures, we will use these tools (and some others)
Tools
	-> Great! We have our tools, we have our target… let's get started, shall we?
S0: Baseline
	- Establishing a Baseline
	- Note: we want to test it in its local network to prevent the network itself to intervene in our mesurements, but since we're using a local network we know we should aim for better values than the ones we need
	-> Now, so we test the system… and what do we find? Millions of users? Hundreds of Thousands of users? Well, actually…
S0: Results
	- That's NOT a typo: it says 26 SECONDS… in a LOCAL NETWORK
	-> That's just wrong, man. But the system was correctly designed and implemented, there must be something wrong with the machine where we installed it
S1: OS Tune
	- Most server OSs are designed to be "general-purpose"… we need to "let them know" what we plan to use them for
	- These things are usually set by kernel variables or startup parameters (for Erlang VM). You have a very comprehensive list of those in Inaka's Blog
	-> Now let's bet again, with all those tweaks, what do we get?
S1: Results
	- N improved 4x
	- but ART is EVEN WORST!
	-> We can't blame the machine anymore, we should start improving our own system
...
S2.1: {client_listener, start_link, [I]}
	-> Let's see the resulting system architecture after those changes
S2.1: Arch
	-> Ok, did we improve anything with it?
S2.1: Results
	- N improved 2x, but C improved 20x and ART is less than half of what it was before
	-> Can we improve it further, let's try with gen_events
...
S2.2: repeater Code
	-> Let's see the resulting system architecture after those changes
S2.2: Arch
	-> Ok, did we improve anything with it?
S2.2: Results
	- N stayed the same
	- but C is 2x
	- and, most importantly we reduced the ART almost 8x
	-> Let's tackle another ubiquitous behavior: gen_server
...
S2.3: init 0 and timeout Code
	-> We didn't do any architecture changes this time, so let's just jump to the results
S2.3: Results
	- N 5x
	- C 5x
	- ART almost 100x
	-> Let's aim now for the supervisors
...
S2.4: supervisors Code [NOTE: 2 SLIDES]
	-> Let's see the resulting system architecture after this change
S2.4: Arch
	-> Ok, now to the results
S2.4: Results
	- N 10K+
	- C 3K+
	-> And finally, let's see some other improvements we can make
S2.5: Logging
	-> I won't show code on this one, because [TODO]
...
S2.5: Code
	-> We didn't do any architecture changes this time, so let's just jump to the results
S2.5: Results
	- Well, we reduce ART to less than its half and we have now an acceptable system
	-> Let's see if we can add some nodes to it
S3: Goals & Steps
	-> In our case…
S3: For MS
	-> Let's see our final architecture
S3: Arch
	-> So, now let's see what we need to do to get to our desired goals
S3: Results
	- We wanted to reach 100K users
	- Our system is really tuned up
	- So, we just need four connected nodes running in the same server
	- We only just scratched the surface of what we can achieve:
		- We tested in one machine
		- We didn't try more nodes
	-> We did it, let's summarize this process a little bit
Summary 1
	- And we did all that with several tiny adjustments
	- We didn't need to redesign any big part of the system (maybe just the db split up was big, but just that one)
	-> So, what else do we know?
